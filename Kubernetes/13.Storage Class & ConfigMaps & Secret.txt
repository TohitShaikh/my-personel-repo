Lec13(Storage Class & ConfigMaps & Secret)-----------------------------------------------------------------------------------------------------------------------------

#We will use nfs server as provisioner for storage class so it create nfs volume

#This below nfs provsioner will use existing nfs server to provsion storage class
#Update the private ip address for nfs server
Install nfs provisoner for kubernetes

vi nfs-storageclass.yml

---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: nfs-pod-provisioner-sa
  namespace: kube-system
---
kind: ClusterRole # Role of kubernetes
apiVersion: rbac.authorization.k8s.io/v1 # auth API
metadata:
  name: nfs-provisioner-clusterRole
rules:
  - apiGroups: [""] # rules on persistentvolumes
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "create", "delete"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "update", "patch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: nfs-provisioner-rolebinding
subjects:
  - kind: ServiceAccount
    name: nfs-pod-provisioner-sa # defined on top of file
    namespace: kube-system
roleRef: # binding cluster role to service account
  kind: ClusterRole
  name: nfs-provisioner-clusterRole # name defined in clusterRole
  apiGroup: rbac.authorization.k8s.io
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: nfs-pod-provisioner-otherRoles
  namespace: kube-system
rules:
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["get", "list", "watch", "create", "update", "patch"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: nfs-pod-provisioner-otherRoles
  namespace: kube-system
subjects:
  - kind: ServiceAccount
    name: nfs-pod-provisioner-sa # same as top of the file
    # replace with namespace where provisioner is deployed
    namespace: kube-system
roleRef:
  kind: Role
  name: nfs-pod-provisioner-otherRoles
  apiGroup: rbac.authorization.k8s.io
  
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: nfs-pod-provisioner
  namespace: kube-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nfs-pod-provisioner
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: nfs-pod-provisioner
    spec:
      serviceAccountName: nfs-pod-provisioner-sa # name of service account created in rbac.yaml
      containers:
        - name: nfs-pod-provisioner
          image: rkevin/nfs-subdir-external-provisioner:fix-k8s-1.20
          volumeMounts:
            - name: nfs-provisioner-v
              mountPath: /persistentvolumes
          env:
            - name: PROVISIONER_NAME # do not change
              value: nfs-provisioner # SAME AS PROVISONER NAME VALUE IN STORAGECLASS
            - name: NFS_SERVER # do not change
              value: 172.31.17.82 # Ip of the NFS SERVER
            - name: NFS_PATH # do not change
              value: /mnt/nfs_share # path to nfs directory setup
      volumes:
       - name: nfs-provisioner-v # same as volumemouts name
         nfs:
           server: 172.31.17.82
           path:  /mnt/nfs_share   
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: nfs-storageclass # IMPORTANT pvc needs to mention this name
  annotations:
    storageclass.kubernetes.io/is-default-class: "true"
provisioner: nfs-provisioner # name can be anything
parameters:
  archiveOnDelete: "false"

kubectl apply -f nfs_StrorageClass.yml

#After applying the storage class you will see a provsioner in kube-system namespace

kubectl get all -n kube-system

kubectl get sc
NAME                         PROVISIONER       RECLAIMPOLICY   VOLUMEBINDINGMODE   ALLOWVOLUMEEXPANSION   AGE
nfs-storageclass (default)   nfs-provisioner   Delete          Immediate           false                  3m9s
#we cam customize the reclaimpolicy to our desired polcy

#After configuring the storage class successfully we will deploy this file "spring_pvc.yml" and observer the pv
kubectl get pv
NAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM              STORAGECLASS       VOLUMEATTRIBUTESCLASS   REASON   AGE
pvc-013ea502-ebbd-49d1-88c7-23ff0c390573   1Gi        RWO            Delete           Bound    test-ns/mongopvc   nfs-storageclass   <unset>                          

This above pv is managed by storage class 

#We will see a subfolder in the nfs server

#We will create a sample pod for demo using strage class

vi jenkins-pvc.yml

apiVersion: v1
kind: Namespace
metadata: 
  name: devops-ns
  labels:
    team: devopc
    tools: cicdtools
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jenkinsdeployment
  namespace: devops-ns
spec:
  selector:
    matchLabels:
      app: jenkins
  template:
    metadata:
      labels:
        app: jenkins
    spec:
      containers:
      - name: jenkinscontainer
        image: jenkins/jenkins:lts
        resources:
          requests:
             cpu: 200m
             memory: 256Mi
          limits:
            memory: "512Mi"
            cpu: "500m"
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: jenkinsvol
          mountPath: /var/jenkins_home
      volumes:
      - name: jenkinsvol
        persistentVolumeClaim:
          claimName: jenkinspvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jenkinspvc
  namespace: devops-ns
spec:
  resources:
    requests:
      storage: 2Gi
  accessModes:
    - ReadWriteOnce
---
apiVersion: v1
kind: Service
metadata:
  name: jenkinssvc
  namespace: devops-ns
spec:
  type: NodePort
  selector:
    app: jenkins
  ports:
  - port: 80
    targetPort: 8080

kubectl apply -f jenkins-pvc.yml

#ConfigMap-------------------------------------------------------------------------------------------------------------------------------------------------------------

vi config-map.yml

apiVersion: v1
kind: ConfigMap
metadata: 
 name: springappconfigmap
 namespace: test-ns
data: 
 mongodbusername: devdb
 mongodbpassword: devdb@123

kubectl apply -f configMap.yml

vi spring-app-configmap.yml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: springapp
  namespace: test-ns  # You can change this to your desired namespace
  labels:
    app: springapp
spec:
  replicas: 2
  selector:
    matchLabels:
      app: springapp
  template:
    metadata:
      labels:
        app: springapp
    spec:
      containers:
      - name: springappcontainer
        image: dockerhandson/spring-boot-mongo:1
        ports:
        - containerPort: 8080
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "500Mi"
            cpu: "500m"
        env:
        - name: MONGO_DB_HOSTNAME
          value: mongosvc
        - name: MONGO_DB_USERNAME
          valueFrom: 
           configMapKeyRef: 
            name: springappconfigmap
            key: mongodbusername
        - name: MONGO_DB_PASSWORD
          valueFrom: 
           configMapKeyRef: 
            name: springappconfigmap
            key: mongodbpassword
---
apiVersion: v1 #We need a service to access above application
kind: Service
metadata:
  name: springappsvc
  namespace: test-ns
spec:
  type: NodePort
  selector:
    app: springapp
  ports:
  - port: 80
    targetPort: 8080
---
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: mongodb
  namespace: test-ns
  labels:
    app: mongodb
spec:
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongocontainer
        image: mongo
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom: 
           configMapKeyRef: 
            name: springappconfigmap
            key: mongodbusername
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom: 
           configMapKeyRef: 
            name: springappconfigmap
            key: mongodbpassword
        volumeMounts: 
        - name: mongodb-host-volume
          mountPath: /data/db
      volumes: 
      - name: mongodb-host-volume
        persistentVolumeClaim: 
         claimName: mongopvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata: 
 name: mongopvc
 namespace: test-ns
spec: 
 accessModes: 
 - ReadWriteOnce
 resources: 
  requests: 
   storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: mongosvc
  namespace: test-ns
spec:
  type: ClusterIP
  selector:
    app: mongodb
  ports:
  - port: 27017
    targetPort:  27017


kubectl apply -f spring-app-configMap.yml

kubectl get all -n test-ns

#It will show error in container status

kubectl get all -n test-ns
NAME                             READY   STATUS                       RESTARTS   AGE
pod/mongodb-kj2q7                0/1     CreateContainerConfigError   0          2m12s
pod/springapp-858b9dc79b-lhhsw   0/1     CreateContainerConfigError   0          2m12s
pod/springapp-858b9dc79b-wrkkd   0/1     CreateContainerConfigError   0          2m12s

kubectl describe pod mongodb-kj2q7 -n test-ns

#Run the configMap script to get the pod up and runnning

kubectl describe cm springappconfigmap -n test-ns
Name:         springappconfigmap
Namespace:    test-ns
Labels:       <none>
Annotations:  <none>

Data
====
mongodbpassword:
----
devdb@123
mongodbusername:
----
devdb

BinaryData
====

Events:  <none>

Secret----------------------------------------------------------------------------------------------------------------------------------------------------------------

vi config-secret.yml

apiVersion: v1
kind: ConfigMap
metadata: 
 name: springappconfigmap
 namespace: test-ns
data: 
 mongodbusername: devdb
---
apiVersion: v1
kind: Secret
metadata: 
 name: springappsecret
 namespace: test-ns
type: Opaque
stringData: 
 mongodbpassword: devdb@123

vi configMap-Secret-springapp.yml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: springapp
  namespace: test-ns  # You can change this to your desired namespace
  labels:
    app: springapp
spec:
  replicas: 2
  selector:
    matchLabels:
      app: springapp
  template:
    metadata:
      labels:
        app: springapp
    spec:
      containers:
      - name: springappcontainer
        image: dockerhandson/spring-boot-mongo:1
        ports:
        - containerPort: 8080
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "500Mi"
            cpu: "500m"
        env:
        - name: MONGO_DB_HOSTNAME
          value: mongosvc
        - name: MONGO_DB_USERNAME
          valueFrom: 
           configMapKeyRef: 
            name: springappconfigmap
            key: mongodbusername
        - name: MONGO_DB_PASSWORD
          valueFrom: 
           secretKeyRef: 
            name: springappsecret
            key: mongodbpassword
---
apiVersion: v1 #We need a service to access above application
kind: Service
metadata:
  name: springappsvc
  namespace: test-ns
spec:
  type: NodePort
  selector:
    app: springapp
  ports:
  - port: 80
    targetPort: 8080
---
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: mongodb
  namespace: test-ns
  labels:
    app: mongodb
spec:
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongocontainer
        image: mongo
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom: 
           configMapKeyRef: 
            name: springappconfigmap
            key: mongodbusername
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom: 
           secretKeyRef: 
            name: springappsecret
            key: mongodbpassword
        volumeMounts: 
        - name: mongodb-host-volume
          mountPath: /data/db
      volumes: 
      - name: mongodb-host-volume
        persistentVolumeClaim: 
         claimName: mongopvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata: 
 name: mongopvc
 namespace: test-ns
spec: 
 accessModes: 
 - ReadWriteOnce
 resources: 
  requests: 
   storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: mongosvc
  namespace: test-ns
spec:
  type: ClusterIP
  selector:
    app: mongodb
  ports:
  - port: 27017
    targetPort:  27017

kubectl apply -f configMap-Secret-springapp.yml 
#After running above file it will the username from configMap and password from secret