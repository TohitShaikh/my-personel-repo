We are paracticing docker file 

vi Dockerfile
FROM ubuntu
RUN echo "Welcome RUN ONE"
RUN apt update -y && apt install git curl wget -y
RUN mkdir -p /opt/app
RUN echo "Welcome RUN TWO"
CMD ["echo" "Welcome to cmd"]
RUN echo "Welcome"
CMD ["date"]

docker build -t image1 .

vi Dockerfile_ENT
FROM ubuntu
RUN echo "Welcome RUN ONE"
RUN apt update -y && apt install git curl wget -y
RUN mkdir -p /opt/app
RUN echo "Welcome RUN TW0"
ENTRYPOINT ["echo","Welocome to Entrypoint"]

docker build -t iamge2 -f Dockerfile_ENT .

vi Dockerfile_ENT_CMD
FROM ubuntu
RUN echo "Welcome RUN ONE"
RUN apt update -y && apt install git curl wget -y
RUN mkdir -p /opt/app
RUN echo "Welcome RUN TW0"
ENTRYPOINT ["echo","Welocome to Entrypoint"]
CMD ["date"]

docker build -t iamge3 -f Dockerfile_ENT_CMD .

#In simple terms, this Dockerfile builds your Maven project inside a Docker container with Java 8, and then copies the resulting WAR file into a Tomcat container, allowing you to deploy your web application.
vi muilti-stage-build 
FROM maven:3-jdk-8-alpine as build
WORKDIR /app
COPY . .
RUN mvn clean package

FROM tomcat:8.0.20-jre8
COPY --from=build /app/target/maven-web-app*.war /usr/local/tomcat/webapps/maven-web-application.war

docker build -t multi-stage-build -f multi-stage-dockerfile .

Docker-compose------------------------------------------------------------------------------------------------------------------------------------------------------
vi docker-compose.yml
version: 3
services: 
  springapp:
    image: dockerhandson/spring-boot-mongo:1
    ports:
    - 8080:8080
    networks:
    - springappbridge
    environment:
    - MONGO_DB_HOSTNAME=mongo 
    - MONGO_DB_USERNAME=devdb
    - MONGO_DB_PASSWORD=mongo@123
  mongo:
  image: mongo
  volumes:
  - mongovol:/data/db
  environment:
  - MONGO_INITDB_ROOT_USERNAME=devdb
  - MINGO_INITDB_ROOT_PASSWORD-devbd@123
  networks:
  - springappbridge
networks:
   springappbridge:
volumes: 
   mongovol:


docker-compose up -d (create+start)
docker-compose create
docker-compose start
docker-compose restart
docker-compose stop
docker-compose log 
docker-compose ps 
docker-compose images
docker-compose config ----> For syntax check

